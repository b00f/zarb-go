// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Header) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Header) Time() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Header) SetTime(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Header) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) TxsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasTxsHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetTxsHash(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) LastReceiptsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasLastReceiptsHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetLastReceiptsHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) LastCommitHash() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasLastCommitHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetLastCommitHash(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) CommitteeHash() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasCommitteeHash() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetCommitteeHash(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(6, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Txs struct{ capnp.Struct }

// Txs_TypeID is the unique identifier for the type Txs.
const Txs_TypeID = 0xc120e2adef2af529

func NewTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func NewRootTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func ReadRootTxs(msg *capnp.Message) (Txs, error) {
	root, err := msg.RootPtr()
	return Txs{root.Struct()}, err
}

func (s Txs) String() string {
	str, _ := text.Marshal(0xc120e2adef2af529, s.Struct)
	return str
}

func (s Txs) Hashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Txs) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Txs) SetHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Txs) NewHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Txs_List is a list of Txs.
type Txs_List struct{ capnp.List }

// NewTxs creates a new list of Txs.
func NewTxs_List(s *capnp.Segment, sz int32) (Txs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Txs_List{l}, err
}

func (s Txs_List) At(i int) Txs { return Txs{s.List.Struct(i)} }

func (s Txs_List) Set(i int, v Txs) error { return s.List.SetStruct(i, v.Struct) }

func (s Txs_List) String() string {
	str, _ := text.MarshalList(0xc120e2adef2af529, s.List)
	return str
}

// Txs_Promise is a wrapper for a Txs promised by a client call.
type Txs_Promise struct{ *capnp.Pipeline }

func (p Txs_Promise) Struct() (Txs, error) {
	s, err := p.Pipeline.Struct()
	return Txs{s}, err
}

type Committer struct{ capnp.Struct }

// Committer_TypeID is the unique identifier for the type Committer.
const Committer_TypeID = 0xb875c9f86444f7cc

func NewCommitter(s *capnp.Segment) (Committer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Committer{st}, err
}

func NewRootCommitter(s *capnp.Segment) (Committer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Committer{st}, err
}

func ReadRootCommitter(msg *capnp.Message) (Committer, error) {
	root, err := msg.RootPtr()
	return Committer{root.Struct()}, err
}

func (s Committer) String() string {
	str, _ := text.Marshal(0xb875c9f86444f7cc, s.Struct)
	return str
}

func (s Committer) Number() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Committer) SetNumber(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Committer) Status() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Committer) SetStatus(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

// Committer_List is a list of Committer.
type Committer_List struct{ capnp.List }

// NewCommitter creates a new list of Committer.
func NewCommitter_List(s *capnp.Segment, sz int32) (Committer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Committer_List{l}, err
}

func (s Committer_List) At(i int) Committer { return Committer{s.List.Struct(i)} }

func (s Committer_List) Set(i int, v Committer) error { return s.List.SetStruct(i, v.Struct) }

func (s Committer_List) String() string {
	str, _ := text.MarshalList(0xb875c9f86444f7cc, s.List)
	return str
}

// Committer_Promise is a wrapper for a Committer promised by a client call.
type Committer_Promise struct{ *capnp.Pipeline }

func (p Committer_Promise) Struct() (Committer, error) {
	s, err := p.Pipeline.Struct()
	return Committer{s}, err
}

type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xf106488f1d14ab37

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xf106488f1d14ab37, s.Struct)
	return str
}

func (s Commit) BlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Commit) HasBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Commit) Round() uint32 {
	return s.Struct.Uint32(0)
}

func (s Commit) SetRound(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Commit) Committers() (Committer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Committer_List{List: p.List()}, err
}

func (s Commit) HasCommitters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) SetCommitters(v Committer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCommitters sets the committers field to a newly
// allocated Committer_List, preferring placement in s's segment.
func (s Commit) NewCommitters(n int32) (Committer_List, error) {
	l, err := NewCommitter_List(s.Struct.Segment(), n)
	if err != nil {
		return Committer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Commit) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Commit) HasSignature() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Commit) SetSignature(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xf106488f1d14ab37, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) LastCommit() (Commit, error) {
	p, err := s.Struct.Ptr(1)
	return Commit{Struct: p.Struct()}, err
}

func (s Block) HasLastCommit() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetLastCommit(v Commit) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLastCommit sets the lastCommit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Block) NewLastCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (Txs, error) {
	p, err := s.Struct.Ptr(2)
	return Txs{Struct: p.Struct()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v Txs) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated Txs struct, preferring placement in s's segment.
func (s Block) NewTxs() (Txs, error) {
	ss, err := NewTxs(s.Struct.Segment())
	if err != nil {
		return Txs{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) LastCommit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Block_Promise) Txs() Txs_Promise {
	return Txs_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type BlockchainResult struct{ capnp.Struct }

// BlockchainResult_TypeID is the unique identifier for the type BlockchainResult.
const BlockchainResult_TypeID = 0xbd88d0eab3826ba9

func NewBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BlockchainResult{st}, err
}

func NewRootBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BlockchainResult{st}, err
}

func ReadRootBlockchainResult(msg *capnp.Message) (BlockchainResult, error) {
	root, err := msg.RootPtr()
	return BlockchainResult{root.Struct()}, err
}

func (s BlockchainResult) String() string {
	str, _ := text.Marshal(0xbd88d0eab3826ba9, s.Struct)
	return str
}

func (s BlockchainResult) Height() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s BlockchainResult) SetHeight(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// BlockchainResult_List is a list of BlockchainResult.
type BlockchainResult_List struct{ capnp.List }

// NewBlockchainResult creates a new list of BlockchainResult.
func NewBlockchainResult_List(s *capnp.Segment, sz int32) (BlockchainResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return BlockchainResult_List{l}, err
}

func (s BlockchainResult_List) At(i int) BlockchainResult { return BlockchainResult{s.List.Struct(i)} }

func (s BlockchainResult_List) Set(i int, v BlockchainResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockchainResult_List) String() string {
	str, _ := text.MarshalList(0xbd88d0eab3826ba9, s.List)
	return str
}

// BlockchainResult_Promise is a wrapper for a BlockchainResult promised by a client call.
type BlockchainResult_Promise struct{ *capnp.Pipeline }

func (p BlockchainResult_Promise) Struct() (BlockchainResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockchainResult{s}, err
}

type BlockResult struct{ capnp.Struct }

// BlockResult_TypeID is the unique identifier for the type BlockResult.
const BlockResult_TypeID = 0x83143f06598cf9e8

func NewBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockResult{st}, err
}

func NewRootBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockResult{st}, err
}

func ReadRootBlockResult(msg *capnp.Message) (BlockResult, error) {
	root, err := msg.RootPtr()
	return BlockResult{root.Struct()}, err
}

func (s BlockResult) String() string {
	str, _ := text.Marshal(0x83143f06598cf9e8, s.Struct)
	return str
}

func (s BlockResult) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockResult) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockResult) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockResult) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockResult_List is a list of BlockResult.
type BlockResult_List struct{ capnp.List }

// NewBlockResult creates a new list of BlockResult.
func NewBlockResult_List(s *capnp.Segment, sz int32) (BlockResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return BlockResult_List{l}, err
}

func (s BlockResult_List) At(i int) BlockResult { return BlockResult{s.List.Struct(i)} }

func (s BlockResult_List) Set(i int, v BlockResult) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockResult_List) String() string {
	str, _ := text.MarshalList(0x83143f06598cf9e8, s.List)
	return str
}

// BlockResult_Promise is a wrapper for a BlockResult promised by a client call.
type BlockResult_Promise struct{ *capnp.Pipeline }

func (p BlockResult_Promise) Struct() (BlockResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockResult{s}, err
}

func (p BlockResult_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Receipt struct{ capnp.Struct }

// Receipt_TypeID is the unique identifier for the type Receipt.
const Receipt_TypeID = 0xe8e68d4102ccc258

func NewReceipt(s *capnp.Segment) (Receipt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Receipt{st}, err
}

func NewRootReceipt(s *capnp.Segment) (Receipt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Receipt{st}, err
}

func ReadRootReceipt(msg *capnp.Message) (Receipt, error) {
	root, err := msg.RootPtr()
	return Receipt{root.Struct()}, err
}

func (s Receipt) String() string {
	str, _ := text.Marshal(0xe8e68d4102ccc258, s.Struct)
	return str
}

func (s Receipt) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Receipt) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Receipt) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Receipt) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Receipt) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Receipt) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Receipt_List is a list of Receipt.
type Receipt_List struct{ capnp.List }

// NewReceipt creates a new list of Receipt.
func NewReceipt_List(s *capnp.Segment, sz int32) (Receipt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Receipt_List{l}, err
}

func (s Receipt_List) At(i int) Receipt { return Receipt{s.List.Struct(i)} }

func (s Receipt_List) Set(i int, v Receipt) error { return s.List.SetStruct(i, v.Struct) }

func (s Receipt_List) String() string {
	str, _ := text.MarshalList(0xe8e68d4102ccc258, s.List)
	return str
}

// Receipt_Promise is a wrapper for a Receipt promised by a client call.
type Receipt_Promise struct{ *capnp.Pipeline }

func (p Receipt_Promise) Struct() (Receipt, error) {
	s, err := p.Pipeline.Struct()
	return Receipt{s}, err
}

type TransactionResult struct{ capnp.Struct }

// TransactionResult_TypeID is the unique identifier for the type TransactionResult.
const TransactionResult_TypeID = 0xbd77371c14feb668

func NewTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return TransactionResult{st}, err
}

func NewRootTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return TransactionResult{st}, err
}

func ReadRootTransactionResult(msg *capnp.Message) (TransactionResult, error) {
	root, err := msg.RootPtr()
	return TransactionResult{root.Struct()}, err
}

func (s TransactionResult) String() string {
	str, _ := text.Marshal(0xbd77371c14feb668, s.Struct)
	return str
}

func (s TransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TransactionResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TransactionResult) Transaction() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasTransaction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetTransaction(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s TransactionResult) Receipt() (Receipt, error) {
	p, err := s.Struct.Ptr(3)
	return Receipt{Struct: p.Struct()}, err
}

func (s TransactionResult) HasReceipt() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetReceipt(v Receipt) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewReceipt sets the receipt field to a newly
// allocated Receipt struct, preferring placement in s's segment.
func (s TransactionResult) NewReceipt() (Receipt, error) {
	ss, err := NewReceipt(s.Struct.Segment())
	if err != nil {
		return Receipt{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// TransactionResult_List is a list of TransactionResult.
type TransactionResult_List struct{ capnp.List }

// NewTransactionResult creates a new list of TransactionResult.
func NewTransactionResult_List(s *capnp.Segment, sz int32) (TransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return TransactionResult_List{l}, err
}

func (s TransactionResult_List) At(i int) TransactionResult {
	return TransactionResult{s.List.Struct(i)}
}

func (s TransactionResult_List) Set(i int, v TransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionResult_List) String() string {
	str, _ := text.MarshalList(0xbd77371c14feb668, s.List)
	return str
}

// TransactionResult_Promise is a wrapper for a TransactionResult promised by a client call.
type TransactionResult_Promise struct{ *capnp.Pipeline }

func (p TransactionResult_Promise) Struct() (TransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return TransactionResult{s}, err
}

func (p TransactionResult_Promise) Receipt() Receipt_Promise {
	return Receipt_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

type AccountResult struct{ capnp.Struct }

// AccountResult_TypeID is the unique identifier for the type AccountResult.
const AccountResult_TypeID = 0xa3bd4ddc3e0a5017

func NewAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func NewRootAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func ReadRootAccountResult(msg *capnp.Message) (AccountResult, error) {
	root, err := msg.RootPtr()
	return AccountResult{root.Struct()}, err
}

func (s AccountResult) String() string {
	str, _ := text.Marshal(0xa3bd4ddc3e0a5017, s.Struct)
	return str
}

func (s AccountResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s AccountResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AccountResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// AccountResult_List is a list of AccountResult.
type AccountResult_List struct{ capnp.List }

// NewAccountResult creates a new list of AccountResult.
func NewAccountResult_List(s *capnp.Segment, sz int32) (AccountResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AccountResult_List{l}, err
}

func (s AccountResult_List) At(i int) AccountResult { return AccountResult{s.List.Struct(i)} }

func (s AccountResult_List) Set(i int, v AccountResult) error { return s.List.SetStruct(i, v.Struct) }

func (s AccountResult_List) String() string {
	str, _ := text.MarshalList(0xa3bd4ddc3e0a5017, s.List)
	return str
}

// AccountResult_Promise is a wrapper for a AccountResult promised by a client call.
type AccountResult_Promise struct{ *capnp.Pipeline }

func (p AccountResult_Promise) Struct() (AccountResult, error) {
	s, err := p.Pipeline.Struct()
	return AccountResult{s}, err
}

type ValidatorResult struct{ capnp.Struct }

// ValidatorResult_TypeID is the unique identifier for the type ValidatorResult.
const ValidatorResult_TypeID = 0xec1c828dae8bffa3

func NewValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func NewRootValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func ReadRootValidatorResult(msg *capnp.Message) (ValidatorResult, error) {
	root, err := msg.RootPtr()
	return ValidatorResult{root.Struct()}, err
}

func (s ValidatorResult) String() string {
	str, _ := text.Marshal(0xec1c828dae8bffa3, s.Struct)
	return str
}

func (s ValidatorResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ValidatorResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ValidatorResult_List is a list of ValidatorResult.
type ValidatorResult_List struct{ capnp.List }

// NewValidatorResult creates a new list of ValidatorResult.
func NewValidatorResult_List(s *capnp.Segment, sz int32) (ValidatorResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValidatorResult_List{l}, err
}

func (s ValidatorResult_List) At(i int) ValidatorResult { return ValidatorResult{s.List.Struct(i)} }

func (s ValidatorResult_List) Set(i int, v ValidatorResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValidatorResult_List) String() string {
	str, _ := text.MarshalList(0xec1c828dae8bffa3, s.List)
	return str
}

// ValidatorResult_Promise is a wrapper for a ValidatorResult promised by a client call.
type ValidatorResult_Promise struct{ *capnp.Pipeline }

func (p ValidatorResult_Promise) Struct() (ValidatorResult, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorResult{s}, err
}

type Peer struct{ capnp.Struct }

// Peer_TypeID is the unique identifier for the type Peer.
const Peer_TypeID = 0xdeb9cfe7754f053f

func NewPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func NewRootPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func ReadRootPeer(msg *capnp.Message) (Peer, error) {
	root, err := msg.RootPtr()
	return Peer{root.Struct()}, err
}

func (s Peer) String() string {
	str, _ := text.Marshal(0xdeb9cfe7754f053f, s.Struct)
	return str
}

func (s Peer) Moniker() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Peer) HasMoniker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Peer) MonikerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Peer) SetMoniker(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Peer) NodeVersion() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Peer) HasNodeVersion() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Peer) SetNodeVersion(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Peer) PeerID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Peer) HasPeerID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Peer) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Peer) SetPeerID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Peer) PublicKey() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Peer) HasPublicKey() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Peer) PublicKeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Peer) SetPublicKey(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Peer) InitialBlockDownload() bool {
	return s.Struct.Bit(0)
}

func (s Peer) SetInitialBlockDownload(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Peer) Height() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Peer) SetHeight(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Peer) ReceivedMsg() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Peer) SetReceivedMsg(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s Peer) InvalidMsg() int32 {
	return int32(s.Struct.Uint32(12))
}

func (s Peer) SetInvalidMsg(v int32) {
	s.Struct.SetUint32(12, uint32(v))
}

func (s Peer) ReceivedBytes() int32 {
	return int32(s.Struct.Uint32(16))
}

func (s Peer) SetReceivedBytes(v int32) {
	s.Struct.SetUint32(16, uint32(v))
}

// Peer_List is a list of Peer.
type Peer_List struct{ capnp.List }

// NewPeer creates a new list of Peer.
func NewPeer_List(s *capnp.Segment, sz int32) (Peer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return Peer_List{l}, err
}

func (s Peer_List) At(i int) Peer { return Peer{s.List.Struct(i)} }

func (s Peer_List) Set(i int, v Peer) error { return s.List.SetStruct(i, v.Struct) }

func (s Peer_List) String() string {
	str, _ := text.MarshalList(0xdeb9cfe7754f053f, s.List)
	return str
}

// Peer_Promise is a wrapper for a Peer promised by a client call.
type Peer_Promise struct{ *capnp.Pipeline }

func (p Peer_Promise) Struct() (Peer, error) {
	s, err := p.Pipeline.Struct()
	return Peer{s}, err
}

type NetworkResult struct{ capnp.Struct }

// NetworkResult_TypeID is the unique identifier for the type NetworkResult.
const NetworkResult_TypeID = 0xefbaa00121a2907b

func NewNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func NewRootNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func ReadRootNetworkResult(msg *capnp.Message) (NetworkResult, error) {
	root, err := msg.RootPtr()
	return NetworkResult{root.Struct()}, err
}

func (s NetworkResult) String() string {
	str, _ := text.Marshal(0xefbaa00121a2907b, s.Struct)
	return str
}

func (s NetworkResult) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NetworkResult) HasPeerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NetworkResult) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkResult) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NetworkResult) Peers() (Peer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Peer_List{List: p.List()}, err
}

func (s NetworkResult) HasPeers() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NetworkResult) SetPeers(v Peer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peer_List, preferring placement in s's segment.
func (s NetworkResult) NewPeers(n int32) (Peer_List, error) {
	l, err := NewPeer_List(s.Struct.Segment(), n)
	if err != nil {
		return Peer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// NetworkResult_List is a list of NetworkResult.
type NetworkResult_List struct{ capnp.List }

// NewNetworkResult creates a new list of NetworkResult.
func NewNetworkResult_List(s *capnp.Segment, sz int32) (NetworkResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NetworkResult_List{l}, err
}

func (s NetworkResult_List) At(i int) NetworkResult { return NetworkResult{s.List.Struct(i)} }

func (s NetworkResult_List) Set(i int, v NetworkResult) error { return s.List.SetStruct(i, v.Struct) }

func (s NetworkResult_List) String() string {
	str, _ := text.MarshalList(0xefbaa00121a2907b, s.List)
	return str
}

// NetworkResult_Promise is a wrapper for a NetworkResult promised by a client call.
type NetworkResult_Promise struct{ *capnp.Pipeline }

func (p NetworkResult_Promise) Struct() (NetworkResult, error) {
	s, err := p.Pipeline.Struct()
	return NetworkResult{s}, err
}

type SendTransactionResult struct{ capnp.Struct }

// SendTransactionResult_TypeID is the unique identifier for the type SendTransactionResult.
const SendTransactionResult_TypeID = 0xcfd704b9b2c62a4a

func NewSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func NewRootSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func ReadRootSendTransactionResult(msg *capnp.Message) (SendTransactionResult, error) {
	root, err := msg.RootPtr()
	return SendTransactionResult{root.Struct()}, err
}

func (s SendTransactionResult) String() string {
	str, _ := text.Marshal(0xcfd704b9b2c62a4a, s.Struct)
	return str
}

func (s SendTransactionResult) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s SendTransactionResult) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s SendTransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SendTransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SendTransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// SendTransactionResult_List is a list of SendTransactionResult.
type SendTransactionResult_List struct{ capnp.List }

// NewSendTransactionResult creates a new list of SendTransactionResult.
func NewSendTransactionResult_List(s *capnp.Segment, sz int32) (SendTransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SendTransactionResult_List{l}, err
}

func (s SendTransactionResult_List) At(i int) SendTransactionResult {
	return SendTransactionResult{s.List.Struct(i)}
}

func (s SendTransactionResult_List) Set(i int, v SendTransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SendTransactionResult_List) String() string {
	str, _ := text.MarshalList(0xcfd704b9b2c62a4a, s.List)
	return str
}

// SendTransactionResult_Promise is a wrapper for a SendTransactionResult promised by a client call.
type SendTransactionResult_Promise struct{ *capnp.Pipeline }

func (p SendTransactionResult_Promise) Struct() (SendTransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return SendTransactionResult{s}, err
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) GetBlock(ctx context.Context, params func(ZarbServer_getBlock_Params) error, opts ...capnp.CallOption) ZarbServer_getBlock_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlock_Params{Struct: s}) }
	}
	return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockHeight(ctx context.Context, params func(ZarbServer_getBlockHeight_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockHeight_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockHeight_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHeight",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockHeight_Params{Struct: s}) }
	}
	return ZarbServer_getBlockHeight_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetTransaction(ctx context.Context, params func(ZarbServer_getTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_getTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getTransaction_Params{Struct: s}) }
	}
	return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetAccount(ctx context.Context, params func(ZarbServer_getAccount_Params) error, opts ...capnp.CallOption) ZarbServer_getAccount_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getAccount_Params{Struct: s}) }
	}
	return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetValidator(ctx context.Context, params func(ZarbServer_getValidator_Params) error, opts ...capnp.CallOption) ZarbServer_getValidator_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getValidator_Params{Struct: s}) }
	}
	return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockchainInfo(ctx context.Context, params func(ZarbServer_getBlockchainInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockchainInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockchainInfo_Params{Struct: s}) }
	}
	return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetNetworkInfo(ctx context.Context, params func(ZarbServer_getNetworkInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getNetworkInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getNetworkInfo_Params{Struct: s}) }
	}
	return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) SendRawTransaction(ctx context.Context, params func(ZarbServer_sendRawTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_sendRawTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_sendRawTransaction_Params{Struct: s}) }
	}
	return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	GetBlock(ZarbServer_getBlock) error

	GetBlockHeight(ZarbServer_getBlockHeight) error

	GetTransaction(ZarbServer_getTransaction) error

	GetAccount(ZarbServer_getAccount) error

	GetValidator(ZarbServer_getValidator) error

	GetBlockchainInfo(ZarbServer_getBlockchainInfo) error

	GetNetworkInfo(ZarbServer_getNetworkInfo) error

	SendRawTransaction(ZarbServer_sendRawTransaction) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlock{c, opts, ZarbServer_getBlock_Params{Struct: p}, ZarbServer_getBlock_Results{Struct: r}}
			return s.GetBlock(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHeight",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockHeight{c, opts, ZarbServer_getBlockHeight_Params{Struct: p}, ZarbServer_getBlockHeight_Results{Struct: r}}
			return s.GetBlockHeight(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getTransaction{c, opts, ZarbServer_getTransaction_Params{Struct: p}, ZarbServer_getTransaction_Results{Struct: r}}
			return s.GetTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getAccount{c, opts, ZarbServer_getAccount_Params{Struct: p}, ZarbServer_getAccount_Results{Struct: r}}
			return s.GetAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getValidator{c, opts, ZarbServer_getValidator_Params{Struct: p}, ZarbServer_getValidator_Results{Struct: r}}
			return s.GetValidator(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockchainInfo{c, opts, ZarbServer_getBlockchainInfo_Params{Struct: p}, ZarbServer_getBlockchainInfo_Results{Struct: r}}
			return s.GetBlockchainInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getNetworkInfo{c, opts, ZarbServer_getNetworkInfo_Params{Struct: p}, ZarbServer_getNetworkInfo_Results{Struct: r}}
			return s.GetNetworkInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_sendRawTransaction{c, opts, ZarbServer_sendRawTransaction_Params{Struct: p}, ZarbServer_sendRawTransaction_Results{Struct: r}}
			return s.SendRawTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_getBlock holds the arguments for a server call to ZarbServer.getBlock.
type ZarbServer_getBlock struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlock_Params
	Results ZarbServer_getBlock_Results
}

// ZarbServer_getBlockHeight holds the arguments for a server call to ZarbServer.getBlockHeight.
type ZarbServer_getBlockHeight struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockHeight_Params
	Results ZarbServer_getBlockHeight_Results
}

// ZarbServer_getTransaction holds the arguments for a server call to ZarbServer.getTransaction.
type ZarbServer_getTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getTransaction_Params
	Results ZarbServer_getTransaction_Results
}

// ZarbServer_getAccount holds the arguments for a server call to ZarbServer.getAccount.
type ZarbServer_getAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getAccount_Params
	Results ZarbServer_getAccount_Results
}

// ZarbServer_getValidator holds the arguments for a server call to ZarbServer.getValidator.
type ZarbServer_getValidator struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getValidator_Params
	Results ZarbServer_getValidator_Results
}

// ZarbServer_getBlockchainInfo holds the arguments for a server call to ZarbServer.getBlockchainInfo.
type ZarbServer_getBlockchainInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockchainInfo_Params
	Results ZarbServer_getBlockchainInfo_Results
}

// ZarbServer_getNetworkInfo holds the arguments for a server call to ZarbServer.getNetworkInfo.
type ZarbServer_getNetworkInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getNetworkInfo_Params
	Results ZarbServer_getNetworkInfo_Results
}

// ZarbServer_sendRawTransaction holds the arguments for a server call to ZarbServer.sendRawTransaction.
type ZarbServer_sendRawTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_sendRawTransaction_Params
	Results ZarbServer_sendRawTransaction_Results
}

type ZarbServer_getBlock_Params struct{ capnp.Struct }

// ZarbServer_getBlock_Params_TypeID is the unique identifier for the type ZarbServer_getBlock_Params.
const ZarbServer_getBlock_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ZarbServer_getBlock_Params{st}, err
}

func NewRootZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ZarbServer_getBlock_Params{st}, err
}

func ReadRootZarbServer_getBlock_Params(msg *capnp.Message) (ZarbServer_getBlock_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Params{root.Struct()}, err
}

func (s ZarbServer_getBlock_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Params) Height() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZarbServer_getBlock_Params) SetHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ZarbServer_getBlock_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s ZarbServer_getBlock_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

// ZarbServer_getBlock_Params_List is a list of ZarbServer_getBlock_Params.
type ZarbServer_getBlock_Params_List struct{ capnp.List }

// NewZarbServer_getBlock_Params creates a new list of ZarbServer_getBlock_Params.
func NewZarbServer_getBlock_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ZarbServer_getBlock_Params_List{l}, err
}

func (s ZarbServer_getBlock_Params_List) At(i int) ZarbServer_getBlock_Params {
	return ZarbServer_getBlock_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Params_List) Set(i int, v ZarbServer_getBlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_getBlock_Params_Promise is a wrapper for a ZarbServer_getBlock_Params promised by a client call.
type ZarbServer_getBlock_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Params_Promise) Struct() (ZarbServer_getBlock_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Params{s}, err
}

type ZarbServer_getBlock_Results struct{ capnp.Struct }

// ZarbServer_getBlock_Results_TypeID is the unique identifier for the type ZarbServer_getBlock_Results.
const ZarbServer_getBlock_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func NewRootZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func ReadRootZarbServer_getBlock_Results(msg *capnp.Message) (ZarbServer_getBlock_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Results{root.Struct()}, err
}

func (s ZarbServer_getBlock_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Results) Result() (BlockResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlock_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlock_Results) SetResult(v BlockResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlock_Results) NewResult() (BlockResult, error) {
	ss, err := NewBlockResult(s.Struct.Segment())
	if err != nil {
		return BlockResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlock_Results_List is a list of ZarbServer_getBlock_Results.
type ZarbServer_getBlock_Results_List struct{ capnp.List }

// NewZarbServer_getBlock_Results creates a new list of ZarbServer_getBlock_Results.
func NewZarbServer_getBlock_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlock_Results_List{l}, err
}

func (s ZarbServer_getBlock_Results_List) At(i int) ZarbServer_getBlock_Results {
	return ZarbServer_getBlock_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Results_List) Set(i int, v ZarbServer_getBlock_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_getBlock_Results_Promise is a wrapper for a ZarbServer_getBlock_Results promised by a client call.
type ZarbServer_getBlock_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Results_Promise) Struct() (ZarbServer_getBlock_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Results{s}, err
}

func (p ZarbServer_getBlock_Results_Promise) Result() BlockResult_Promise {
	return BlockResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockHeight_Params struct{ capnp.Struct }

// ZarbServer_getBlockHeight_Params_TypeID is the unique identifier for the type ZarbServer_getBlockHeight_Params.
const ZarbServer_getBlockHeight_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_getBlockHeight_Params(s *capnp.Segment) (ZarbServer_getBlockHeight_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHeight_Params{st}, err
}

func NewRootZarbServer_getBlockHeight_Params(s *capnp.Segment) (ZarbServer_getBlockHeight_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHeight_Params{st}, err
}

func ReadRootZarbServer_getBlockHeight_Params(msg *capnp.Message) (ZarbServer_getBlockHeight_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHeight_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockHeight_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_getBlockHeight_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getBlockHeight_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockHeight_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_getBlockHeight_Params_List is a list of ZarbServer_getBlockHeight_Params.
type ZarbServer_getBlockHeight_Params_List struct{ capnp.List }

// NewZarbServer_getBlockHeight_Params creates a new list of ZarbServer_getBlockHeight_Params.
func NewZarbServer_getBlockHeight_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHeight_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockHeight_Params_List{l}, err
}

func (s ZarbServer_getBlockHeight_Params_List) At(i int) ZarbServer_getBlockHeight_Params {
	return ZarbServer_getBlockHeight_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHeight_Params_List) Set(i int, v ZarbServer_getBlockHeight_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHeight_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_getBlockHeight_Params_Promise is a wrapper for a ZarbServer_getBlockHeight_Params promised by a client call.
type ZarbServer_getBlockHeight_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHeight_Params_Promise) Struct() (ZarbServer_getBlockHeight_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHeight_Params{s}, err
}

type ZarbServer_getBlockHeight_Results struct{ capnp.Struct }

// ZarbServer_getBlockHeight_Results_TypeID is the unique identifier for the type ZarbServer_getBlockHeight_Results.
const ZarbServer_getBlockHeight_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_getBlockHeight_Results(s *capnp.Segment) (ZarbServer_getBlockHeight_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHeight_Results{st}, err
}

func NewRootZarbServer_getBlockHeight_Results(s *capnp.Segment) (ZarbServer_getBlockHeight_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHeight_Results{st}, err
}

func ReadRootZarbServer_getBlockHeight_Results(msg *capnp.Message) (ZarbServer_getBlockHeight_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHeight_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockHeight_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_getBlockHeight_Results) Result() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZarbServer_getBlockHeight_Results) SetResult(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ZarbServer_getBlockHeight_Results_List is a list of ZarbServer_getBlockHeight_Results.
type ZarbServer_getBlockHeight_Results_List struct{ capnp.List }

// NewZarbServer_getBlockHeight_Results creates a new list of ZarbServer_getBlockHeight_Results.
func NewZarbServer_getBlockHeight_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHeight_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_getBlockHeight_Results_List{l}, err
}

func (s ZarbServer_getBlockHeight_Results_List) At(i int) ZarbServer_getBlockHeight_Results {
	return ZarbServer_getBlockHeight_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHeight_Results_List) Set(i int, v ZarbServer_getBlockHeight_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHeight_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_getBlockHeight_Results_Promise is a wrapper for a ZarbServer_getBlockHeight_Results promised by a client call.
type ZarbServer_getBlockHeight_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHeight_Results_Promise) Struct() (ZarbServer_getBlockHeight_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHeight_Results{s}, err
}

type ZarbServer_getTransaction_Params struct{ capnp.Struct }

// ZarbServer_getTransaction_Params_TypeID is the unique identifier for the type ZarbServer_getTransaction_Params.
const ZarbServer_getTransaction_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func NewRootZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func ReadRootZarbServer_getTransaction_Params(msg *capnp.Message) (ZarbServer_getTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Params) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getTransaction_Params) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Params) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getTransaction_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getTransaction_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getTransaction_Params_List is a list of ZarbServer_getTransaction_Params.
type ZarbServer_getTransaction_Params_List struct{ capnp.List }

// NewZarbServer_getTransaction_Params creates a new list of ZarbServer_getTransaction_Params.
func NewZarbServer_getTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Params_List{l}, err
}

func (s ZarbServer_getTransaction_Params_List) At(i int) ZarbServer_getTransaction_Params {
	return ZarbServer_getTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Params_List) Set(i int, v ZarbServer_getTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_getTransaction_Params_Promise is a wrapper for a ZarbServer_getTransaction_Params promised by a client call.
type ZarbServer_getTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Params_Promise) Struct() (ZarbServer_getTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Params{s}, err
}

type ZarbServer_getTransaction_Results struct{ capnp.Struct }

// ZarbServer_getTransaction_Results_TypeID is the unique identifier for the type ZarbServer_getTransaction_Results.
const ZarbServer_getTransaction_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func NewRootZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func ReadRootZarbServer_getTransaction_Results(msg *capnp.Message) (ZarbServer_getTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Results) Result() (TransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return TransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Results) SetResult(v TransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated TransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_getTransaction_Results) NewResult() (TransactionResult, error) {
	ss, err := NewTransactionResult(s.Struct.Segment())
	if err != nil {
		return TransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getTransaction_Results_List is a list of ZarbServer_getTransaction_Results.
type ZarbServer_getTransaction_Results_List struct{ capnp.List }

// NewZarbServer_getTransaction_Results creates a new list of ZarbServer_getTransaction_Results.
func NewZarbServer_getTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Results_List{l}, err
}

func (s ZarbServer_getTransaction_Results_List) At(i int) ZarbServer_getTransaction_Results {
	return ZarbServer_getTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Results_List) Set(i int, v ZarbServer_getTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_getTransaction_Results_Promise is a wrapper for a ZarbServer_getTransaction_Results promised by a client call.
type ZarbServer_getTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Results_Promise) Struct() (ZarbServer_getTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Results{s}, err
}

func (p ZarbServer_getTransaction_Results_Promise) Result() TransactionResult_Promise {
	return TransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getAccount_Params struct{ capnp.Struct }

// ZarbServer_getAccount_Params_TypeID is the unique identifier for the type ZarbServer_getAccount_Params.
const ZarbServer_getAccount_Params_TypeID = 0xcd6c734787642800

func NewZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func NewRootZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func ReadRootZarbServer_getAccount_Params(msg *capnp.Message) (ZarbServer_getAccount_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Params{root.Struct()}, err
}

func (s ZarbServer_getAccount_Params) String() string {
	str, _ := text.Marshal(0xcd6c734787642800, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getAccount_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getAccount_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getAccount_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getAccount_Params_List is a list of ZarbServer_getAccount_Params.
type ZarbServer_getAccount_Params_List struct{ capnp.List }

// NewZarbServer_getAccount_Params creates a new list of ZarbServer_getAccount_Params.
func NewZarbServer_getAccount_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Params_List{l}, err
}

func (s ZarbServer_getAccount_Params_List) At(i int) ZarbServer_getAccount_Params {
	return ZarbServer_getAccount_Params{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Params_List) Set(i int, v ZarbServer_getAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Params_List) String() string {
	str, _ := text.MarshalList(0xcd6c734787642800, s.List)
	return str
}

// ZarbServer_getAccount_Params_Promise is a wrapper for a ZarbServer_getAccount_Params promised by a client call.
type ZarbServer_getAccount_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Params_Promise) Struct() (ZarbServer_getAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Params{s}, err
}

type ZarbServer_getAccount_Results struct{ capnp.Struct }

// ZarbServer_getAccount_Results_TypeID is the unique identifier for the type ZarbServer_getAccount_Results.
const ZarbServer_getAccount_Results_TypeID = 0x8e979661cc6a1161

func NewZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func NewRootZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func ReadRootZarbServer_getAccount_Results(msg *capnp.Message) (ZarbServer_getAccount_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Results{root.Struct()}, err
}

func (s ZarbServer_getAccount_Results) String() string {
	str, _ := text.Marshal(0x8e979661cc6a1161, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Results) Result() (AccountResult, error) {
	p, err := s.Struct.Ptr(0)
	return AccountResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getAccount_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Results) SetResult(v AccountResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated AccountResult struct, preferring placement in s's segment.
func (s ZarbServer_getAccount_Results) NewResult() (AccountResult, error) {
	ss, err := NewAccountResult(s.Struct.Segment())
	if err != nil {
		return AccountResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getAccount_Results_List is a list of ZarbServer_getAccount_Results.
type ZarbServer_getAccount_Results_List struct{ capnp.List }

// NewZarbServer_getAccount_Results creates a new list of ZarbServer_getAccount_Results.
func NewZarbServer_getAccount_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Results_List{l}, err
}

func (s ZarbServer_getAccount_Results_List) At(i int) ZarbServer_getAccount_Results {
	return ZarbServer_getAccount_Results{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Results_List) Set(i int, v ZarbServer_getAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Results_List) String() string {
	str, _ := text.MarshalList(0x8e979661cc6a1161, s.List)
	return str
}

// ZarbServer_getAccount_Results_Promise is a wrapper for a ZarbServer_getAccount_Results promised by a client call.
type ZarbServer_getAccount_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Results_Promise) Struct() (ZarbServer_getAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Results{s}, err
}

func (p ZarbServer_getAccount_Results_Promise) Result() AccountResult_Promise {
	return AccountResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getValidator_Params struct{ capnp.Struct }

// ZarbServer_getValidator_Params_TypeID is the unique identifier for the type ZarbServer_getValidator_Params.
const ZarbServer_getValidator_Params_TypeID = 0xeed94cf76be61d8e

func NewZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func NewRootZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func ReadRootZarbServer_getValidator_Params(msg *capnp.Message) (ZarbServer_getValidator_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Params{root.Struct()}, err
}

func (s ZarbServer_getValidator_Params) String() string {
	str, _ := text.Marshal(0xeed94cf76be61d8e, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getValidator_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getValidator_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getValidator_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getValidator_Params_List is a list of ZarbServer_getValidator_Params.
type ZarbServer_getValidator_Params_List struct{ capnp.List }

// NewZarbServer_getValidator_Params creates a new list of ZarbServer_getValidator_Params.
func NewZarbServer_getValidator_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Params_List{l}, err
}

func (s ZarbServer_getValidator_Params_List) At(i int) ZarbServer_getValidator_Params {
	return ZarbServer_getValidator_Params{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Params_List) Set(i int, v ZarbServer_getValidator_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Params_List) String() string {
	str, _ := text.MarshalList(0xeed94cf76be61d8e, s.List)
	return str
}

// ZarbServer_getValidator_Params_Promise is a wrapper for a ZarbServer_getValidator_Params promised by a client call.
type ZarbServer_getValidator_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Params_Promise) Struct() (ZarbServer_getValidator_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Params{s}, err
}

type ZarbServer_getValidator_Results struct{ capnp.Struct }

// ZarbServer_getValidator_Results_TypeID is the unique identifier for the type ZarbServer_getValidator_Results.
const ZarbServer_getValidator_Results_TypeID = 0xfb42d1f26b074c15

func NewZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func NewRootZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func ReadRootZarbServer_getValidator_Results(msg *capnp.Message) (ZarbServer_getValidator_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Results{root.Struct()}, err
}

func (s ZarbServer_getValidator_Results) String() string {
	str, _ := text.Marshal(0xfb42d1f26b074c15, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Results) Result() (ValidatorResult, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getValidator_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Results) SetResult(v ValidatorResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ValidatorResult struct, preferring placement in s's segment.
func (s ZarbServer_getValidator_Results) NewResult() (ValidatorResult, error) {
	ss, err := NewValidatorResult(s.Struct.Segment())
	if err != nil {
		return ValidatorResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getValidator_Results_List is a list of ZarbServer_getValidator_Results.
type ZarbServer_getValidator_Results_List struct{ capnp.List }

// NewZarbServer_getValidator_Results creates a new list of ZarbServer_getValidator_Results.
func NewZarbServer_getValidator_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Results_List{l}, err
}

func (s ZarbServer_getValidator_Results_List) At(i int) ZarbServer_getValidator_Results {
	return ZarbServer_getValidator_Results{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Results_List) Set(i int, v ZarbServer_getValidator_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Results_List) String() string {
	str, _ := text.MarshalList(0xfb42d1f26b074c15, s.List)
	return str
}

// ZarbServer_getValidator_Results_Promise is a wrapper for a ZarbServer_getValidator_Results promised by a client call.
type ZarbServer_getValidator_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Results_Promise) Struct() (ZarbServer_getValidator_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Results{s}, err
}

func (p ZarbServer_getValidator_Results_Promise) Result() ValidatorResult_Promise {
	return ValidatorResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockchainInfo_Params struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Params_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Params.
const ZarbServer_getBlockchainInfo_Params_TypeID = 0x8fb41d4bd35c5a30

func NewZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Params(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Params) String() string {
	str, _ := text.Marshal(0x8fb41d4bd35c5a30, s.Struct)
	return str
}

// ZarbServer_getBlockchainInfo_Params_List is a list of ZarbServer_getBlockchainInfo_Params.
type ZarbServer_getBlockchainInfo_Params_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Params creates a new list of ZarbServer_getBlockchainInfo_Params.
func NewZarbServer_getBlockchainInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getBlockchainInfo_Params_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Params_List) At(i int) ZarbServer_getBlockchainInfo_Params {
	return ZarbServer_getBlockchainInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Params_List) Set(i int, v ZarbServer_getBlockchainInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x8fb41d4bd35c5a30, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Params_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Params promised by a client call.
type ZarbServer_getBlockchainInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Params_Promise) Struct() (ZarbServer_getBlockchainInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Params{s}, err
}

type ZarbServer_getBlockchainInfo_Results struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Results_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Results.
const ZarbServer_getBlockchainInfo_Results_TypeID = 0xa128fe760c2612c4

func NewZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Results(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) String() string {
	str, _ := text.Marshal(0xa128fe760c2612c4, s.Struct)
	return str
}

func (s ZarbServer_getBlockchainInfo_Results) Result() (BlockchainResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockchainResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockchainInfo_Results) SetResult(v BlockchainResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockchainResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlockchainInfo_Results) NewResult() (BlockchainResult, error) {
	ss, err := NewBlockchainResult(s.Struct.Segment())
	if err != nil {
		return BlockchainResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlockchainInfo_Results_List is a list of ZarbServer_getBlockchainInfo_Results.
type ZarbServer_getBlockchainInfo_Results_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Results creates a new list of ZarbServer_getBlockchainInfo_Results.
func NewZarbServer_getBlockchainInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockchainInfo_Results_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Results_List) At(i int) ZarbServer_getBlockchainInfo_Results {
	return ZarbServer_getBlockchainInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Results_List) Set(i int, v ZarbServer_getBlockchainInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xa128fe760c2612c4, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Results_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Results promised by a client call.
type ZarbServer_getBlockchainInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Results_Promise) Struct() (ZarbServer_getBlockchainInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Results{s}, err
}

func (p ZarbServer_getBlockchainInfo_Results_Promise) Result() BlockchainResult_Promise {
	return BlockchainResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getNetworkInfo_Params struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Params_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Params.
const ZarbServer_getNetworkInfo_Params_TypeID = 0xe051a47070c97f9e

func NewZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func NewRootZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Params(msg *capnp.Message) (ZarbServer_getNetworkInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Params) String() string {
	str, _ := text.Marshal(0xe051a47070c97f9e, s.Struct)
	return str
}

// ZarbServer_getNetworkInfo_Params_List is a list of ZarbServer_getNetworkInfo_Params.
type ZarbServer_getNetworkInfo_Params_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Params creates a new list of ZarbServer_getNetworkInfo_Params.
func NewZarbServer_getNetworkInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getNetworkInfo_Params_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Params_List) At(i int) ZarbServer_getNetworkInfo_Params {
	return ZarbServer_getNetworkInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Params_List) Set(i int, v ZarbServer_getNetworkInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xe051a47070c97f9e, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Params_Promise is a wrapper for a ZarbServer_getNetworkInfo_Params promised by a client call.
type ZarbServer_getNetworkInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Params_Promise) Struct() (ZarbServer_getNetworkInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Params{s}, err
}

type ZarbServer_getNetworkInfo_Results struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Results_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Results.
const ZarbServer_getNetworkInfo_Results_TypeID = 0x8d7ad02d9eab8fb7

func NewZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func NewRootZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Results(msg *capnp.Message) (ZarbServer_getNetworkInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) String() string {
	str, _ := text.Marshal(0x8d7ad02d9eab8fb7, s.Struct)
	return str
}

func (s ZarbServer_getNetworkInfo_Results) Result() (NetworkResult, error) {
	p, err := s.Struct.Ptr(0)
	return NetworkResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getNetworkInfo_Results) SetResult(v NetworkResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated NetworkResult struct, preferring placement in s's segment.
func (s ZarbServer_getNetworkInfo_Results) NewResult() (NetworkResult, error) {
	ss, err := NewNetworkResult(s.Struct.Segment())
	if err != nil {
		return NetworkResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getNetworkInfo_Results_List is a list of ZarbServer_getNetworkInfo_Results.
type ZarbServer_getNetworkInfo_Results_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Results creates a new list of ZarbServer_getNetworkInfo_Results.
func NewZarbServer_getNetworkInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getNetworkInfo_Results_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Results_List) At(i int) ZarbServer_getNetworkInfo_Results {
	return ZarbServer_getNetworkInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Results_List) Set(i int, v ZarbServer_getNetworkInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Results_List) String() string {
	str, _ := text.MarshalList(0x8d7ad02d9eab8fb7, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Results_Promise is a wrapper for a ZarbServer_getNetworkInfo_Results promised by a client call.
type ZarbServer_getNetworkInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Results_Promise) Struct() (ZarbServer_getNetworkInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Results{s}, err
}

func (p ZarbServer_getNetworkInfo_Results_Promise) Result() NetworkResult_Promise {
	return NetworkResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_sendRawTransaction_Params struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Params_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Params.
const ZarbServer_sendRawTransaction_Params_TypeID = 0x8317eae56a55f0ba

func NewZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func NewRootZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Params(msg *capnp.Message) (ZarbServer_sendRawTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Params) String() string {
	str, _ := text.Marshal(0x8317eae56a55f0ba, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Params) RawTx() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_sendRawTransaction_Params) HasRawTx() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Params) SetRawTx(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_sendRawTransaction_Params_List is a list of ZarbServer_sendRawTransaction_Params.
type ZarbServer_sendRawTransaction_Params_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Params creates a new list of ZarbServer_sendRawTransaction_Params.
func NewZarbServer_sendRawTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Params_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Params_List) At(i int) ZarbServer_sendRawTransaction_Params {
	return ZarbServer_sendRawTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Params_List) Set(i int, v ZarbServer_sendRawTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0x8317eae56a55f0ba, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Params_Promise is a wrapper for a ZarbServer_sendRawTransaction_Params promised by a client call.
type ZarbServer_sendRawTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Params_Promise) Struct() (ZarbServer_sendRawTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Params{s}, err
}

type ZarbServer_sendRawTransaction_Results struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Results_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Results.
const ZarbServer_sendRawTransaction_Results_TypeID = 0xc0689e5f33bf949d

func NewZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func NewRootZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Results(msg *capnp.Message) (ZarbServer_sendRawTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) String() string {
	str, _ := text.Marshal(0xc0689e5f33bf949d, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Results) Result() (SendTransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return SendTransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Results) SetResult(v SendTransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated SendTransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_sendRawTransaction_Results) NewResult() (SendTransactionResult, error) {
	ss, err := NewSendTransactionResult(s.Struct.Segment())
	if err != nil {
		return SendTransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_sendRawTransaction_Results_List is a list of ZarbServer_sendRawTransaction_Results.
type ZarbServer_sendRawTransaction_Results_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Results creates a new list of ZarbServer_sendRawTransaction_Results.
func NewZarbServer_sendRawTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Results_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Results_List) At(i int) ZarbServer_sendRawTransaction_Results {
	return ZarbServer_sendRawTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Results_List) Set(i int, v ZarbServer_sendRawTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xc0689e5f33bf949d, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Results_Promise is a wrapper for a ZarbServer_sendRawTransaction_Results promised by a client call.
type ZarbServer_sendRawTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Results_Promise) Struct() (ZarbServer_sendRawTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Results{s}, err
}

func (p ZarbServer_sendRawTransaction_Results_Promise) Result() SendTransactionResult_Promise {
	return SendTransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xacX\x7f\x8c\x14w\x15\x7fo\xbe\xbb;\xb7\xd7" +
	"\xbd\xee\xce\xcd^\xaa\x04z\xa79\x0c\x9c\xd2R\xce\xa6" +
	"z\x09.\\\x8fx\xb4\x9c\xde\xecASN\xaa\xce\xed" +
	"\x8e\xdcp\xfb\xab3\xb3\xb7\x806\x17i\x1b+z\xd0" +
	"`c\xb5\xb1\xc4R\x13#\xd86\xa2h!!\x8aZ" +
	"\x0d\x04R\x84\x10CS\xaa%\xb6\xa5\xa4\x15N{)" +
	"ha\xcd\xfb\xce\xce\xec\xcc\xb2\xf7\xab\xf1\xbf\xd97o" +
	"\xdf\xaf\xef\xe7\xbd\xcfw\xde\xd2\x0d\xa1\x15\xc2\x1d\xc1\x17" +
	"\x1a\x01\x94o\x04C\xe5\x0bW\xbf\xbb>\x94\x88?\x0c" +
	"R\x0b\x96;\xaf=\xf0\xe4\xc9\x91\x03\x8f@\x90\x89\x00" +
	"\x9d\xcb\x83\x8d(\xf7\x05E\x00yu\xf0\x05\xc0\xf2\xa1" +
	"\xcb\xeb6\xbdq\xf1\x96\x87AjC\x80 \x92\xd2\xeb" +
	"\xc1S\x08(O\x06\x13\x80\xe5S\xc9?\x1c\xb9\xf5\x93" +
	"\x0b\x1f\xf5*\xb4\x84\xf6\x93\xc2\xc2\x10)\xfcf\xe7\xbe" +
	"\xddKNn\x1d\xf7*\xac\x0a\x1d\"\x85u\xa4p\xfd" +
	"\xd8\xa9+\x8b\xff<1\xae\xb4\xa1\x00\x10\xa0\xd7\xc5\xd0" +
	"6z\xfd\xcdP\x09\xb0\xacJ\x9b\x8e\xab\xdf\x7fr\x87" +
	"/\x82\xd0S\xa40\xc1\x1d\\\xde\xfb\x83\xb1\x03\xaf\xbe" +
	"\xb6\x03\x94\x16\x14<\x09\x89\x94\x85$\x9e\x97\x17\xd0S" +
	"\xe7G\xc52\x02\x96\x97\x0en8}\xef\x82_\xed\xb4" +
	"\xcdqww\x86\x8f!\x04\xca\x0d\xf2\xcf\xbf\xfc`\xeb" +
	"\xc8\x13\xa0\xb4\xa1\xf3jq\x98\x07\xfa\xd909\xfac" +
	"\xf3'\"\xa3\xd7\x17=\xe3\x8dd}\x98\xd7\"\xcb\x15" +
	"\xbeT\xdaw)\x83\xbf\xd8\xe3U\x18\xb7-<\xcd\x15" +
	"n\xe9o\xfc\xdc\xab}\x87\x9f\xad)=W<\x1c\x9e" +
	"\x87\xf2\x890\x05}\x94+\x1f\x7f\xbf'}\xe5h\xf1" +
	"E\xca\xcb\xa3Mq\xc9o\x87\xff#Or\xdd\x890" +
	"\x15\xa9'2\x96\xbf\xf6\xbd\x7f\xbfX\xe7L\xe5\xbe\xc6" +
	"W\xe4\xf5\x8d\xf4\xb4\xae\x91\x8et\xf8\xd7\xd7\xe3\xf3\xef" +
	"*\x1d\xae\xd1\xe5\xf9N4v\xa1\x8c7\x91\xf2\xb5\xc6" +
	"\xb7\x00\xcb?\x1b\xd9\xf6\xcb\x8b'\x1f;\\'\x88\xce" +
	"37-C\xf9\x0d\xae\xfc\xfaM\x14\xf1\xd3O\xfc\xb6" +
	"\xf3+\xbb\x87\x7f\xe7\xcd\x1f#\xafP\xfe-\x11RX" +
	"<\xd9q\xe9\xb9\xf3mG\xea\xe4/\xdf\x199&\xaf" +
	"\x8c\xd0\xd3r\xd2\xbd\xbe(\xfd\xad\xcf\x9b\x99\x13\xf6a" +
	"\xd8\xb6\xb2\x91]d\xeb\xa1\x08\xa5|O\xc7\x9f\xf6\x1f" +
	"\x0c\xfc\xf5\xe5\x9a\xc8l\xcds\x91A\x94'\xb8\xb5w" +
	"\xb9\xf6\xc1\xc1]\x0b\xd5\xed\x7f;\x0d^{\xab\x9b8" +
	"N\xd77\x91F\"\xf8\xc5\xe2[/\x1f|\x8d\xec\xb1" +
	"\x9a\xba\xc8\x07\x9bN\xc9/5\xd1\x7f\x8e4q\x18\xed" +
	"\x1e;Z(\xfcD\xf9\xbb\x07F\xe7\xa2\xfb\x09F\xf7" +
	"\xff\xfe\xb8\xb0r\xfc\xcd\x0b59\x0ad\xe6D\xf4\xa2" +
	"|6JOg\xa2\xe4\xf3\xd9\xf2w\x9e\x1f\xdf6\xff" +
	"\x9dzx\xb8#\xd6\x81\xf2\xca\x18/H\x8c\x8a\xb7c" +
	"\xc1\x9b#\xef\xaf9\xfbO_\x0a\x0f\xc4\xf6p\xfc\xc5" +
	"\xc8\xdc\xd7\x1f\xdf\xf31\xfc\xf1\xa1Ku\\w\x9e\x88" +
	"\xcdC\xf9\x1c7w\x96+\xdf\xb5/\xbe`goh" +
	"\xa2\xb6~\x1c3\xab\xa4\xf3\xb2\"q\xf4H\x04\x83\xf9" +
	"\xb7\xfet\xdb\x8f\xfa/LzOvy\xf3vr\xdd" +
	"\xd7L\xc1\xfdc\xect\xd3\xf3\xe7CWAj\xf1\x14" +
	"\x0f\xb03\xdb,\xa0\xbc\xa5\x99\xb7u\xb3(\xc8\xe7d" +
	"\x11\xa0\xdc\xb2F\x1c\xf9\xd7_\xba\xff\xeb\xb5\xf7\x92\xbc" +
	"\x97\xec\x9d\x91\xc9^\xa9T\xba=\xa5\x16r\xacp\xfb" +
	"V\xd5\x18\xba\x8d\x9e\x0b]\xdd\x99|j$\xa9\x99\xc5" +
	"\x8c\x05\xd0\x8f\xa8DX\x00 \x80\x00\xd2\xaa\x0e\x00e" +
	"\x05Ce\x8d\x80\x12b\x9cJ$\xad&a\x0fC\xa5" +
	"_@I\x10\xe24a\xa4\xbee\x00J/Ce\xad" +
	"\x80\xd1a\xd5\x1c\xc6&\x10\xb0\x090\x9aV-\xd5\xf9" +
	"\xd1:D\xbe0Vm-@\x8cy\"\x0b\xf9\"\x1b" +
	"T\x8d\xa1\x01\xcd\x18\xd5\x8c\xdbL-\x97N\xaa\xa5\xb5" +
	"\x86\x9a3\xd5\x94\xa5\xe7s\xed\xfd\xaa\xa1f\xd1T\x02" +
	"n\xb8M\x14D\x03C%.`\xab\xa1\x96\xd6nv" +
	"\x1c\xbb\x0e\x82S9\xd8\xa8Y\xbc\x10\xbd\x9a\xbeq\xd8" +
	"j\xefo%\xeb>\xe3\x1dU\xe3\xbe\x0cge\xfb\x0b" +
	"\x9aU\xca\x1b#\xabs_\xcb\xb7'\x13\xbc\xd8>\xe3" +
	"]U\xe3\x09\x83\xbf\xc6X\x15z5U\x9a1\x09\xbb" +
	"6&\x99t<,&\x0f\xed\x0c\x95\xa5t\x94\x82}" +
	"\x94K\x92\x00\xca\xa7\x18*\x9f\x1101\xcc3\xc70" +
	"\x08\x18\x06,\x8fj\xc6P\xde\xd4-\xc0-\x18\x00\x01" +
	"\x03\xb3\x0c`e*\x95/\xe6\xacv\x8e(6\x8b," +
	"\xdd\xf9]\x93\xa5\xe0s\xd2\xab\xa9bZ3\x08\x9f\xed" +
	"\xae\xc1w\xbb\x01\x94\x0b\x0c\x95\xf7<\xf8\x9c\xa0\x83z" +
	"\x87\xa1rE@\xac\xc0s\xd2\x00P\xdec\x98D\x01" +
	"%\x86qd\x00\xd25\xca\xfe\x03\x86\x03\x0d$\x0d\x08" +
	"q\x0c\x00\xc8A\xec\x06H\"\xc3\x81\x08\x89\x83,\x8e" +
	"A\x009\x8c\xdb\x01\x06\"$\xff\x08\xc9C\x818\x86" +
	"\x00\xe4\x16\xdc\x0a0\x10'y\x1b\xc9\xc5`\x9cO\xde" +
	"\x05h\x00\x0c\xcc'\xf9\"\x927\x84\xe2\xd8\x00 /" +
	"\xc4m\x00\x03\xed$_\x8a\x02\x8e\x8dj\x86\xa9\xe7s" +
	"N\x89\xa3\x96\x9e\xd50\x08\x02\x06\x01\xcb\x19\xd5\xe4\x07" +
	"\x0a\xad#\xbd^\xc4\x99\x96ji\xbd\xaa\x09\xe8\xca\xc6" +
	"\xac\xcd\xa6O\x87\xfe\x9b\xd4R\x1a\xea\x05\x8b\xbf\x01\xf0" +
	"\xbd\xbb;\x9f\xcdBB\xb7|\x7fJ\xe5\xb3Y\xdd\xb2" +
	"4h\xd5|\xf2\x82\x91/\xe4M\xcd\xc0\x95\xe9\xb4\xa1" +
	"\x99&\xdc\x00\xfe\xd0L\x98L\x0d\xabz\x8e\xe3\xbf\x02" +
	"N\x98sS\xce\xb2q\x1c\x04\x7f\x88\xd0\xec1\x883" +
	"\x83\xd6\xa5\xf09\xb4\xa6wx\xcdz\x06\xb8\x17\x8b\x1a" +
	"G\xfe\x19^i:\x0a\x9fe,j\x92)\x06\x97w" +
	"\x1aO\xd1iw\xe7\xb3\x09\x0e\x02\xdelSM\x90J" +
	"\xb3-!\xe1\"\x86\xca\xa7\x05L\xe4\x8a\xd9!\xcdp" +
	"\xa0\x9c \x94\x16\xcd\x1b\x86\x87P\xcb>,5RC" +
	";]\xf5hg\xb0\xca0.\xed(\x1f\x07P\xd60" +
	"T\xee\xe7\x03LMk\x06\xc6\xaa\x97\xd7J\xcd\\\xb8" +
	"3\x9dJ\xea\x92\xb4\xfdZ\xb46\x9b\x18\xab^\xa3\xa6" +
	"-\xb4\xe7\x0c\x136X(\xf4\x98\x1b\xba:\x0f@\xd9" +
	"\xc0P\x19\xf6\x84\xae\xd1\x09|\x95\xa1\x92\xf1\x84\xae\x0f" +
	"\x01(\xc3\x0c\x15\x8bF\x12\xb3G\xd2\x834\xd02\x0c" +
	"\x95\xcd\x022=]\x97D\xcbV%\x06\x10ip8" +
	"\xfdoh)M/P~\xeeei\xdaL\xaa\xc8O" +
	"\xb6\xba\x89L\x81\xc6\x0a58c\xe9\xc3\xb0\xf5\xac\xe9" +
	"\xc0\xbd\x82NK\x07k7\x9b\xf6e\xa5\x8e\xb9v\x8a" +
	"X5\x875\x13o\x06\xecg\xc8kt\xf3\x1c\xf9\xcb" +
	"\xb9^x\x1a\xa0\xbb\xda\x00.\xfe=\x0c:\xa6\xda\xc3" +
	"\xd1=\xa8\xe9(4\xe0\x0ba@\xcb\xa5=\xd5\xf2\xf4" +
	"q\xfd\xfes\xdd\xcf\xf3\xb4\x9f\xbf\xdf<\xf0\x99\xf3t" +
	"rn?\x1e\xe7\xf3\xa6\xcf\xdd\xebm\xba\xb4\xfd\xa7\xd8" +
	"\xafi8+J\xa7^\xb9\xccP\xf9\xc0\xd3@W\xbb" +
	"\xbc\x9c\xce\xeap:\x06\x1cJ\xdf\x0b0\xd0@\x9c\x1b" +
	"\xe7\x9c\x8e6\xa7K\xd8\xe5\xe7t\xc1\xe1\xf4!?\xa7" +
	"3\x87\xd3\x07\xfd\x9c\x1ep8\xdd\xf0qz6\x9f\xd3" +
	"G4\x03# `\x04\xb0\x9c\xcb\xa7\xb5\xfb4\xc3\xf4" +
	"5l\xa2\xa0i\xc6\xea\x1eW\xa9P\x1c\xca\xe8\xa9{" +
	"5\xaa\x9a#\xd3s\xba\xa5\xab\x99n\xa4^\xed\xc9\x97" +
	"r\xd1L^M#\x82\x80\x08n[:5\xe6\x13`" +
	"TK\x83\xd8gnt\xa5znT\xcd\xe8\xe9>`" +
	"\x1e\xa1\xab\xda\xda\xbd\xc5\xd2\xcc9]\xf0\xbcW\xd9\x0a" +
	"P\xa68\xde\xa4\x96\x8a\xd2L\xaa\xc1qG=\x1e\xe9" +
	"\xa8\x02y\xea\xef\x87)F\xd9}\x94\xa0j\xe5\x8d\xa4" +
	"\x16\xad3\xc9f\xe4\xbf\xe9\xb2um\xd3@\x10k\x9a" +
	"\xe2\xff9\x10\xfc)U\x8a<\xe3 \xa8\x16pY\xa5" +
	"\x80=B-\xb4Z\xe9\xa7;\x0bc\xd5\x8fr@\xdf" +
	"T\xbc\xe1\x1a f\xf5ZzKV\x99\xcc\xf1\xac\x93" +
	"\xe74C\xa5@\xcd\x89vsf\x07+D\xf6\x185" +
	"\xa7`7\xe7\xa3\xf4\xefG\x18*\x8f\x0bX\xe6\x9f\x82" +
	"\xfe;l\xab\x91/\xe6\xd2\xd8\x00\x026x/\xa3\xcc" +
	"\x1b\xbd\xbb\xc1\xa9Do\xea\x1bs\xaaU4\x00\xb5\xb9" +
	"\x7f\xedU.|&\xc0\x8c\xbc\xe4n\xf8\xa6e\xd5\xaa" +
	"\x0f\xceNm,\x08\xe0,\xe3<\x1f\xfc\x13\xf7\x80 " +
	"\xbd-bu\xd5\x87\xce\xa6L:\xb7\x15\x04\xe9\x8c\x88" +
	"\x82\xbb_Ag\x07&\x1d\xa5wGDd\xce&\xc7" +
	"\xb3\xc9;0\x08\x82\xf4\x9c\x88\x01w\xa9\x81\xceF@" +
	"zf\x13\x08\xd2\x0fE\x0c\xba\xab:t\x16o\xd2\xf8" +
	".\x10\xa4o\x8b\x18r\xf7/\xe8\xac\x17\xa5\x87\xc8_" +
	"QD\xd1\xddY\xa2\xb3\x8f\x92\xf4\xa7@\x904\xb1\xec" +
	"\xd4\x12\x00V`\xf5W\xc2\xbe\xb4\xdb\"N.\x90\xb0" +
	"\xe9\xc5\x16q\x9e\x05\x96\xabh\xf0>\x83(u\x9a\xc7" +
	"\x0a:Ws\xcc\xdbR\xde\x17\x90\xb0\xc7\xcf\x0a,;" +
	"7\x0dt\xd8\x8b\x91\xfd~\x9cks'53:\xab" +
	"\xfb\xb8\xbb]\xb2a\xf0\xbf\x00\x00\x00\xff\xff\xa4\xd4\xb6" +
	"\xbb"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x83143f06598cf9e8,
		0x8317eae56a55f0ba,
		0x85252b1ec1c352d2,
		0x8d7ad02d9eab8fb7,
		0x8df1c729f8d2ca00,
		0x8e979661cc6a1161,
		0x8ededcb57f98aaf0,
		0x8fb41d4bd35c5a30,
		0x946b1f715eac1308,
		0xa128fe760c2612c4,
		0xa2b1016cefab775b,
		0xa3bd4ddc3e0a5017,
		0xb875c9f86444f7cc,
		0xb8f393fd6f7f0c44,
		0xbd77371c14feb668,
		0xbd88d0eab3826ba9,
		0xc0689e5f33bf949d,
		0xc120e2adef2af529,
		0xcd6c734787642800,
		0xcfd704b9b2c62a4a,
		0xd3df8a6125925ab9,
		0xdeb9cfe7754f053f,
		0xe051a47070c97f9e,
		0xe8e68d4102ccc258,
		0xec1c828dae8bffa3,
		0xeed94cf76be61d8e,
		0xefbaa00121a2907b,
		0xf106488f1d14ab37,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4,
		0xfb42d1f26b074c15)
}
